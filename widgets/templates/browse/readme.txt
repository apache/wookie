This widget template provides an interface for displaying a list of items coupled with an 
interface for searching and filtering those items. It is assumed that a suitable REST API
is available for retrieving search results in XML format.

[NOTE: the XML restriction is relatively easy to work around if your REST API returns another
format such as JSON. Join us on the dev mailing list and we'll help you work it out]

* Customizing

This section describes how the template can be customised.

** Results list

The initial results list is generated by retrieving and XML document from the URL defined by
"browse.index.url". This document is then transformed into HTML using a stylesheet defined
in "browse.index.xsl.url" which degaults to "index2html.xsl". We recommend copying this 
stylesheet to your widget definition and editing it to process the data returned by your
API.

If a search had been performed in the form provided then the results are retrieved from the 
URL defined by "browse.search.url". Note that the variable "query" defines the search string
entered by the user.

The results are displayed in an accordion control.

*** Item identifiers

When generating the results list you need to ensure that each item has an attribute "wid" which
contains the ID of the item in question. This is later used for retrieving the details about that
item. See the templates example "index2html.xsl" or the "testWidgets/browseTestWidget/index2html.xsl"
for examples.

** Result detail

When an item is expanded an ajax request is made to retrieve the details of the item in question.
The URL used is defined by "browse.get.detail.url", you can use the variable "itemId" as the
identifier for this item.
 
The XML returned is then transformed using XSLT to provide the HTML content that will be inserted
into the expanded control. The location of the XSLT file is defined by "browse.detail.xsl.url" and
defaults to "detail2html.xsl". We recommend copying this 
stylesheet to your widget definition and editing it to process the data returned by your
API.
** Events

You can register callbacks for events using the
WIDGETNAME_browse_controller.register(EVENTNAME, callback function)
method.

Available events are:

*** Expand

Called whenever an item in the browse list has been expanded. The
function is passed an event object (which is generated by JQuery) and
the ID of the item being expanded.

#+BEGIN_SRC javascript
${widget.shortname}_browse_controller.register("expand", function(event, itemid) {
    alert("expanded item with id " + itemId);
});
#+END_SRC

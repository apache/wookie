template.name=browse
widget.shortname=twitter
#
# Twitter don't like apps with the word "Twitter" in the name
#
widget.name=Twidget
widget.description=See what's happening on Twitter
widget.help=<p>Initially this widget displays the most recent tweets in the Twitter timeline.</p> <p>You can either click on their icon, or expand the search form and enter a twitter screen name, to see the most recent tweets from a particular person.</p><p>Alternatively, if you leave the search form blank, this will show the public timeline again.</p>

#
# The name of the XML element that represents a single item. In a Twitter XML API call, each tweet is in an element called <status>, so this
# is what we put here.
# type: string
#
browse.item.name="status"

# The URL from which to retrieve data for the browse index. We override this with the public timeline API URL for Twitter, so
# this will give us a mix of the latest public tweets
#
# type: string
# variables: sort = the sort term for APIs that support it
#            order = the sort order for APIs that support it
browse.index.url="http://api.twitter.com/1/statuses/public_timeline.xml"

# The URL from which to retrieve search data.
# We override this here with the user_timeline API URL for twitter, including the screenname as the query
#
# type: string
# variables: query = query string entered into the search form
#            sort = the sort term for APIs that support it
#            order = the sort order for APIs that support it
browse.search.url="http://api.twitter.com/1/statuses/user_timeline.xml?screen_name=" + query + "&include_entities=true"

#
# The template string to use for the collection of items to browse. This is used to hold
# the set of items to display. We override this to set the class to "tweet_list" and use a UL rather
# than a DIV
#
# type: string
#
browse.collection.template = "<div id='results' data-role='collapsible-set'><ul class='tweet_list'>${ITEMS}</ul></div>"

#
# The names of the elements to map into the template placeholders. E.g. if it contains "title", then $TITLE in the template 
# would be replaced by the content of the <title> element in the XML data.
# In our case these are the important elements returned by the Twitter API.
#
browse.item.elements = "id,name,screen_name,text,profile_image_url,created_at,source"
